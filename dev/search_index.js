var documenterSearchIndex = {"docs":
[{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/EPFL-ENAC/TethysChlorisCore.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/EPFL-ENAC/TethysChlorisCore.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/EPFL-ENAC/TethysChlorisCore.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Core-Documentation","page":"Reference","title":"Core Documentation","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Modules = [TethysChlorisCore]","category":"page"},{"location":"95-reference/#TethysChlorisCore.check_extraneous_fields-Union{Tuple{N}, Tuple{T}, Tuple{Type{T}, Dict{String, Any}, Union{NTuple{N, String}, Vector{String}}}} where {T<:AbstractModelComponent, N}","page":"Reference","title":"TethysChlorisCore.check_extraneous_fields","text":"check_extraneous_fields(::Type{T}, data::Dict{String,Any}) where {T<:AbstractModelComponent}\n\nCheck if the input dictionary contains any keys that are not part of the required fields for type T.\n\nArguments\n\nT: Type of model component to check fields against\ndata: Dictionary containing fields to validate\nrequired_fields: List of required fields for the model component. This is typically obtained from get_required_fields(T) or fieldnames(T)\n\nThrows\n\nArgumentError: If any extraneous keys are found in the data dictionary\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.get_calculated_fields-Union{Tuple{Type{T}}, Tuple{T}} where T<:AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.get_calculated_fields","text":"get_calculated_fields(::Type{T}) where {T<:AbstractModelComponent}\n\nGet a list of calculated fields for a given model component type. Calculated fields are those that are computed based on other fields and should not be provided when creating a model component. By default, returns an empty list. Components should override this method if they have calculated fields.\n\nArguments\n\nT: Type of model component to get calculated fields for\n\nReturns\n\nVector{Symbol}: List of calculated field names\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.get_dimensions-Union{Tuple{T}, Tuple{Type{T}, Any}} where T<:AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.get_dimensions","text":"get_dimensions(::Type{T}, data) where {T<:AbstractModelComponent}\n\nReturn a dictionary of dimension specifications for a given model component type. By default returns an empty dictionary. This method should be overridden by concrete types to specify their required dimensions.\n\nArguments\n\nT: Type of the model component\ndata: Data source containing dimension information\n\nReturns\n\nDict: Dictionary mapping variable names to their dimension specifications\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.get_optional_fields-Union{Tuple{Type{T}}, Tuple{T}} where T<:AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.get_optional_fields","text":"get_optional_fields(::Type{T}) where {T<:AbstractModelComponent}\n\nGet a list of optional fields for a given model component type. Optional fields are those that can be omitted when creating a model component. By default, returns an empty list. Components should override this method if they have optional fields.\n\nArguments\n\nT: Type of model component to get optional fields for\n\nReturns\n\nVector{Symbol}: List of optional field names\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.get_required_fields-Union{Tuple{Type{T}}, Tuple{T}} where T<:AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.get_required_fields","text":"get_required_fields(::Type{T}) where {T<:AbstractModelComponent}\n\nReturns an empty array of symbols representing required fields for a given AbstractModelComponent type. This is a default method that can be specialized for specific subtypes that need to define their own required fields.\n\nReturns\n\nVector{Symbol}: A vector of symbols with the fields required to initialize the AbstractModelComponent type\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.initialize-Union{Tuple{T}, Tuple{FT}, Tuple{Type{FT}, Type{T}, Any, Vararg{Any}}} where {FT<:AbstractFloat, T<:AbstractModelComponent}","page":"Reference","title":"TethysChlorisCore.initialize","text":"initialize(::Type{FT}, ::Type{T}, data::Dict{String,Any}, args...) where {FT<:AbstractFloat, T<:AbstractModelComponent}\n\nInitialize model components with optional fields. The model component requires a keyword constructor.\n\nArguments\n\n::Type{FT}: Floating point precision type (e.g., Float32 or Float64)\n::Type{T}: Component type constructor that subclasses AbstractModelComponent\ndata: Data source (e.g., Dict for Parameters, NCDataset for State/Auxiliary variables)\nargs...: Additional arguments passed to preprocess_fields\n\nReturns\n\nT{FT}: Initialized component struct of type T with floating point precision FT\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.initialize_field-Union{Tuple{FT}, Tuple{Type{FT}, NCDatasets.NCDataset, String, Tuple}} where FT<:AbstractFloat","page":"Reference","title":"TethysChlorisCore.initialize_field","text":"initialize_field(\n    ::Type{FT},\n    data::NCDataset,\n    name::String,\n    dims::Tuple;\n    default::Union{Nothing,Number} = nothing\n) where {FT<:AbstractFloat}\n\nInitialize a field array with specified dimensions and optionally set initial conditions.\n\nArguments\n\nFT: Float type to use for the field array (e.g., Float32, Float64)\ndata: NCDataset containing source data\nname: Name of the variable in the dataset\ndims: Tuple specifying the dimensions of the field array\ndefault: Optional default value to use if no initial condition is found\n\nReturns\n\nArray{FT}: Initialized array with the specified dimensions, filled with initial conditions if available\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.preprocess_fields-Union{Tuple{T}, Tuple{FT}, Tuple{Type{FT}, Type{T}, Any, Vararg{Any}}} where {FT<:AbstractFloat, T<:AbstractModelComponent}","page":"Reference","title":"TethysChlorisCore.preprocess_fields","text":"preprocess_fields(::Type{FT}, ::Type{T}, data, args...) where {FT<:AbstractFloat,T<:AbstractModelComponent}\n\nPreprocess fields before the initialization of a given AbstractModelComponent type.\n\nArguments\n\nFT: Type parameter for floating point precision\nT: Type parameter for model components\ndata: Input data to be preprocessed\nargs...: Additional arguments\n\nReturns\n\nReturns the input data without modifications\n\nThis is a default implementation that passes through the input data unchanged. Custom preprocessing can be implemented by defining methods for specific types.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.preprocess_fields-Union{Tuple{T}, Tuple{FT}, Tuple{Type{FT}, Type{T}, NCDatasets.NCDataset}} where {FT<:AbstractFloat, T<:AbstractAuxiliaryVariables}","page":"Reference","title":"TethysChlorisCore.preprocess_fields","text":"preprocess_fields(\n    ::Type{FT},\n    ::Type{T},\n    data::NCDataset\n) where {FT<:AbstractFloat,T<:AbstractAuxiliaryVariables}\n\nInitialize fields for auxiliary variables based on their dimension specifications.\n\nArguments\n\nFT: Float type to use for the fields\nT: Type of auxiliary variables\ndata: NCDataset containing the source data\n\nReturns\n\nDict{String,Any}: Dictionary of initialized fields\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#TethysChlorisCore.validate_fields-Union{Tuple{T}, Tuple{Type{T}, Dict{String, Any}}} where T<:AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.validate_fields","text":"validate_fields(::Type{T}) where {T<:AbstractModelComponent}\n\nPerforms some checks on the fields passed to initialize the AbstractModelComponent type.\n\nReturns\n\nnothing: If all fields are valid, the function returns nothing\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#Model-Components","page":"Reference","title":"Model Components","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"TethysChlorisCore.ModelComponents.AbstractModelComponent\nTethysChlorisCore.ModelComponents.AbstractIndividualModelComponent\nTethysChlorisCore.ModelComponents.AbstractHeightDependentModelComponent\nTethysChlorisCore.ModelComponents.AbstractModelComponentSet","category":"page"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractModelComponent","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractModelComponent","text":"AbstractModelComponent{FT<:AbstractFloat}\n\nThe base abstract type for all model components. Parametrized by the floating-point type FT used for numerical calculations.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractIndividualModelComponent","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractIndividualModelComponent","text":"AbstractIndividualModelComponent{FT<:AbstractFloat} <: AbstractModelComponent{FT}\n\nAbstract type for individual model components that represent discrete entities in the model. These components operate on single points or objects without height-dependency.\n\nSubtypes include parameters, state variables, forcing inputs, and auxiliary variables for individual model elements.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractHeightDependentModelComponent","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractHeightDependentModelComponent","text":"AbstractHeightDependentModelComponent{FT<:AbstractFloat} <: AbstractIndividualModelComponent{FT}\n\nAbstract type for model components that vary with height or depth in a vertical profile. These components represent quantities that change along a vertical dimension and typically contain values at different height/depth levels.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractModelComponentSet","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractModelComponentSet","text":"AbstractModelComponentSet{FT<:AbstractFloat} <: AbstractModelComponent{FT}\n\nAbstract type for collections of related model components. Component sets group multiple individual components of the same category together, providing organization and encapsulation of related model elements.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Auxiliary-variables","page":"Reference","title":"Auxiliary variables","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"TethysChlorisCore.ModelComponents.AbstractAuxiliaryVariables\nTethysChlorisCore.ModelComponents.AbstractHeightDependentAuxiliaryVariables\nTethysChlorisCore.ModelComponents.AbstractAuxiliaryVariableSet","category":"page"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractAuxiliaryVariables","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractAuxiliaryVariables","text":"AbstractAuxiliaryVariables{FT<:AbstractFloat} <: AbstractIndividualModelComponent{FT}\n\nAbstract type for auxiliary variables that provide additional information or intermediate calculations in the model. These variables are not part of the core model state but are used to support model calculations.\n\nSee AbstractAuxiliaryVariableSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractHeightDependentAuxiliaryVariables","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractHeightDependentAuxiliaryVariables","text":"AbstractHeightDependentAuxiliaryVariables{FT<:AbstractFloat} <: AbstractHeightDependentModelComponent{FT}\n\nAbstract type for height-dependent auxiliary variables. These variables provide additional information or intermediate calculations that vary with height in the model.\n\nSee AbstractAuxiliaryVariableSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractAuxiliaryVariableSet","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractAuxiliaryVariableSet","text":"AbstractAuxiliaryVariableSet{FT<:AbstractFloat} <: AbstractModelComponentSet{FT}\n\nAbstract type for collections of auxiliary variables. Auxiliary variable groups multiple auxiliary variables together, providing organization and encapsulation of related model elements.\n\nExamples\n\nBase.@kwdef struct HeightDependentHydrologicStateVariables{FT<:AbstractFloat} <:\n                   AbstractHeightDependentModelComponent{FT}\n    An::Matrix{FT} # Net CO₂ assimilation [μmol m⁻² s⁻¹]\n    Dr::Matrix{FT} # Root distribution [-]\nend\n\nBase.@kwdef struct HydrologicAuxiliaryVariables{FT<:AbstractFloat} <:\n                   AbstractAuxiliaryVariables{FT}\n    high::HeightDependentHydrologicStateVariables{FT}\n    low::HeightDependentHydrologicStateVariables{FT}\n\n    alp_soil::Vector{FT} # Soil albedo [-]\n    b_soil::Vector{FT} # Soil retention curve parameter [-]\nend\n\nBase.@kwdef struct BiogeochemistryAuxiliaryVariables{FT<:AbstractFloat} <:\n                   AbstractAuxiliaryVariables{FT}\n    BLit::Matrix{FT}\n    NavlI::Matrix{FT}\nend\n\nBase.@kwdef struct AuxiliaryVariableSet{FT<:AbstractFloat} <:\n                   AbstractAuxiliaryVariableSet{FT}\n    hydrologic::HydrologicAuxiliaryVariables{FT}\n    biogeochemistry::BiogeochemistryAuxiliaryVariables{FT}\nend\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Forcing-inputs","page":"Reference","title":"Forcing inputs","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"TethysChlorisCore.ModelComponents.AbstractForcingInputs\nTethysChlorisCore.ModelComponents.AbstractHeightDependentForcingInputs\nTethysChlorisCore.ModelComponents.AbstractForcingInputSet","category":"page"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractForcingInputs","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractForcingInputs","text":"AbstractForcingInputs{FT<:AbstractFloat} <: AbstractIndividualModelComponent{FT}\n\nAbstract type for forcing inputs that drive the model. Forcing inputs represent external factors that influence the model behavior, such as meteorological or anthropogenic data.\n\nSee AbstractForcingInputSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractHeightDependentForcingInputs","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractHeightDependentForcingInputs","text":"AbstractHeightDependentForcingInputs{FT<:AbstractFloat} <: AbstractHeightDependentModelComponent{FT}\n\nAbstract type for height-dependent forcing inputs. These inputs vary with height or depth in the model and control the behavior of the model at different levels.\n\nSee AbstractForcingInputSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractForcingInputSet","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractForcingInputSet","text":"AbstractForcingInputSet{FT<:AbstractFloat} <: AbstractModelComponentSet{FT}\n\nAbstract type for collections of forcing inputs. Forcing input sets group multiple forcing inputs together, providing organization and encapsulation of related model elements.\n\nExamples\n\nBase.@kwdef struct AnthropogenicInputs{FT<:AbstractFloat} <: AbstractForcingInputs{FT}\n    Salt::Vector{FT} # Salt concentration\n    IrD::Vector{FT} # Drip irrigation\nend\n\nBase.@kwdef struct MeteorologicalInputs{FT<:AbstractFloat} <: AbstractForcingInputs{FT}\n    Pr::Vector{FT} # Precipitation\n    Ta::Vector{FT} # Air temperature at reference height\n    Ws::Vector{FT} # Wind speed at reference height\nend\n\nBase.@kwdef struct ForcingInputSet{FT<:AbstractFloat} <: AbstractForcingInputSet{FT}\n    anthropogenic::AnthropogenicInputs{FT}\n    meteorological::MeteorologicalInputs{FT}\nend\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Parameters","page":"Reference","title":"Parameters","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"TethysChlorisCore.ModelComponents.AbstractParameters\nTethysChlorisCore.ModelComponents.AbstractHeightDependentParameters\nTethysChlorisCore.ModelComponents.AbstractParameterSet","category":"page"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractParameters","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractParameters","text":"AbstractParameters{FT<:AbstractFloat} <: AbstractIndividualModelComponent{FT}\n\nAbstract type for model parameters that define the model structure and behavior. Parameters are fixed values or coefficients that control the model dynamics.\n\nSee AbstractParameterSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractHeightDependentParameters","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractHeightDependentParameters","text":"AbstractHeightDependentParameters{FT<:AbstractFloat} <: AbstractHeightDependentModelComponent{FT}\n\nAbstract type for height-dependent model parameters. These parameters vary with height or depth in the model and control the behavior of the model at different levels.\n\nSee AbstractParameterSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractParameterSet","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractParameterSet","text":"AbstractParameterSet{FT<:AbstractFloat} <: AbstractModelComponentSet{FT}\n\nAbstract type for collections of model parameters. Parameter sets group multiple parameters together, providing organization and encapsulation of related model elements.\n\nExamples\n\n\nBase.@kwdef struct SoilParameters{FT<:AbstractFloat} <: AbstractParameters{FT}\n    Osat::FT # Saturation moisture 0 kPa\n    Ohy::FT # Hygroscopic Moisture Evaporation cessation 10000 kPa\nend\n\nBase.@kwdef struct HeightDependentVegetationParameters{FT<:AbstractFloat} <:\n                   AbstractHeightDependentParameters{FT}\n    Knit::FT # Canopy nitrogen decay coefficient\n    FI::FT # Intrinsic quantum efficiency\nend\n\nBase.@kwdef struct VegetationParameters{FT<:AbstractFloat} <: AbstractParameters{FT}\n    high::HeightDependentParameters{FT}\n    low::HeightDependentParameters{FT}\n\n    KcI::FT # Interception drainage rate coefficient.\n    Sllit::FT # Specific leaf area of litter\n\nend\n\nBase.@kwdef struct ParameterSet{FT<:AbstractFloat} <: AbstractParameterSet{FT}\n    soil::SoilParameters{FT}\n    vegetation::VegetationParameters{FT}\nend\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#State-variables","page":"Reference","title":"State variables","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"TethysChlorisCore.ModelComponents.AbstractStateVariables\nTethysChlorisCore.ModelComponents.AbstractHeightDependentStateVariables\nTethysChlorisCore.ModelComponents.AbstractStateVariableSet","category":"page"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractStateVariables","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractStateVariables","text":"AbstractStateVariables{FT<:AbstractFloat} <: AbstractIndividualModelComponent{FT}\n\nAbstract type for model state variables that represent the internal state of the model. State variables are dynamic quantities that change over time and are used to track the model evolution.\n\nSee AbstractStateVariableSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractHeightDependentStateVariables","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractHeightDependentStateVariables","text":"AbstractHeightDependentStateVariables{FT<:AbstractFloat} <: AbstractHeightDependentModelComponent{FT}\n\nAbstract type for height-dependent model state variables. These variables represent the internal state of the model that varies with height or depth in the model.\n\nSee AbstractStateVariableSet for an example of usage.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#TethysChlorisCore.ModelComponents.AbstractStateVariableSet","page":"Reference","title":"TethysChlorisCore.ModelComponents.AbstractStateVariableSet","text":"AbstractStateVariableSet{FT<:AbstractFloat} <: AbstractModelComponentSet{FT}\n\nAbstract type for collections of model state variables. State variable sets group multiple state variables together, providing organization and encapsulation of related model elements.\n\nExamples\n\nBase.@kwdef struct HydrologicStateVariables{FT<:AbstractFloat} <:\n                   AbstractStateVariables{FT}\n\n    V::Matrix{FT} # Liquid water volume [mm]\n    Tdp::Matrix{FT} # Soil temperature [°C]\nend\n\nBase.@kwdef struct HeightDependentVegetationStateVariables{FT<:AbstractFloat} <:\n                   AbstractHeightDependentModelComponent{FT}\n    AgeDL::Matrix{FT} # Average age of dead leaves\n    B::Matrix{FT} # Biomass/carbon pools\nend\n\nBase.@kwdef struct VegetationStateVariables{FT<:AbstractFloat} <:\n                   AbstractStateVariables{FT}\n    high::HeightDependentVegetationStateVariables{FT}\n    low::HeightDependentVegetationStateVariables{FT}\nend\n\nBase.@kwdef struct StateVariableSet{FT<:AbstractFloat} <:\n                   AbstractStateVariableSet{FT}\n    hydrologic::HydrologicStateVariables{FT}\n    vegetation::VegetationStateVariables{FT}\nend\n\n\n\n\n\n","category":"type"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"","page":"TethysChlorisCore","title":"TethysChlorisCore","text":"CurrentModule = TethysChlorisCore","category":"page"},{"location":"#TethysChlorisCore","page":"TethysChlorisCore","title":"TethysChlorisCore","text":"","category":"section"},{"location":"","page":"TethysChlorisCore","title":"TethysChlorisCore","text":"Welcome to the documentation for TethysChlorisCore. This package aims to facilitate the use of the Tethys-Chloris model by centralizing shared utilities and types that are used by the Tethys-Chloris model and its extensions.","category":"page"},{"location":"#Contributors","page":"TethysChlorisCore","title":"Contributors","text":"","category":"section"},{"location":"","page":"TethysChlorisCore","title":"TethysChlorisCore","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hsolleder\"><img src=\"https://avatars.githubusercontent.com/u/9566930?v=4?s=100\" width=\"100px;\" alt=\"H Solleder\"/><br /><sub><b>H Solleder</b></sub></a><br /><a href=\"#code-hsolleder\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sphamba\"><img src=\"https://avatars.githubusercontent.com/u/17217484?v=4?s=100\" width=\"100px;\" alt=\"Son Pham-Ba\"/><br /><sub><b>Son Pham-Ba</b></sub></a><br /><a href=\"#review-sphamba\" title=\"Reviewed Pull Requests\">👀</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
